/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/src/js/custom/general/login.js":
/*!**************************************************!*\
  !*** ./resources/src/js/custom/general/login.js ***!
  \**************************************************/
/***/ (() => {

eval(" // Class Definition\n\nvar KTLogin = function () {\n  var _login;\n\n  var _signinForm;\n\n  var _signupForm;\n\n  var _passwordResetForm;\n\n  var _showForm = function _showForm(type) {\n    var form;\n    KTUtil.addClass(_signinForm, 'd-none');\n    KTUtil.addClass(_signupForm, 'd-none');\n    KTUtil.addClass(_passwordResetForm, 'd-none');\n\n    if (type === 'signin') {\n      form = _signinForm;\n    }\n\n    if (type === 'signup') {\n      form = _signupForm;\n    }\n\n    if (type === 'password-reset') {\n      form = _passwordResetForm;\n    }\n\n    KTUtil.removeClass(form, 'd-none');\n    KTUtil.css(form, 'animationDuration', '0.6s');\n    KTUtil.animateClass(form, 'animate__animated animate__backInUp');\n  };\n\n  var _handleSignInForm = function _handleSignInForm() {\n    var validation;\n\n    var submitButton = _login.querySelector('#kt_login_signin_form_submit_button');\n\n    var signupButton = _login.querySelector('#kt_login_signin_form_singup_button');\n\n    var passwordResetButton = _login.querySelector('#kt_login_signin_form_password_reset_button'); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n\n    validation = FormValidation.formValidation(_signinForm, {\n      fields: {\n        email: {\n          validators: {\n            notEmpty: {\n              message: 'Email is required'\n            },\n            emailAddress: {\n              message: 'The value is not a valid email address'\n            }\n          }\n        },\n        password: {\n          validators: {\n            notEmpty: {\n              message: 'Password is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        submitButton: new FormValidation.plugins.SubmitButton(),\n        //defaultSubmit: new FormValidation.plugins.DefaultSubmit(), // Uncomment this line to enable normal button submit after form validation\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row'\n        })\n      }\n    });\n    submitButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      validation.validate().then(function (status) {\n        if (status === 'Valid') {\n          var LOGIN_URL = _signinForm.getAttribute('data-login-url');\n\n          var CSRF_TOKEN = _signinForm.getAttribute('data-csrf_token');\n\n          $.ajaxSetup({\n            headers: {\n              'X-CSRF-TOKEN': CSRF_TOKEN\n            }\n          });\n          $.ajax({\n            url: LOGIN_URL,\n            method: 'POST',\n            data: new FormData(document.getElementById('kt_login_signin_form')),\n            cache: false,\n            processData: false,\n            contentType: false,\n            success: function success(result) {\n              if ((result === null || result === void 0 ? void 0 : result.status) === 1) {\n                Swal.fire({\n                  title: 'Success!',\n                  text: result === null || result === void 0 ? void 0 : result.message,\n                  icon: \"success\",\n                  buttonsStyling: false,\n                  confirmButtonText: \"Ok,Got it\",\n                  customClass: {\n                    confirmButton: \"btn btn-primary\"\n                  }\n                });\n                window.location.href = window.location.href;\n              } else {\n                Swal.fire({\n                  title: 'Validation Error',\n                  text: result === null || result === void 0 ? void 0 : result.message,\n                  icon: \"error\",\n                  buttonsStyling: false,\n                  confirmButtonText: \"Ok, got it!\",\n                  customClass: {\n                    confirmButton: \"btn btn-primary\"\n                  }\n                });\n              }\n            },\n            error: function error(jqXHR, textStatus, errorThrown) {\n              Swal.fire({\n                text: textStatus,\n                icon: \"error\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              });\n            }\n          });\n        } else {\n          swal.fire({\n            text: \"Sorry, looks like there are some errors detected, please try again.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn fw-bold btn-light-primary\"\n            }\n          }).then(function () {\n            KTUtil.scrollTop();\n          });\n        }\n      });\n    }); // Handle forgot button\n\n    passwordResetButton.addEventListener('click', function (e) {\n      e.preventDefault();\n\n      _showForm('password-reset');\n    }); // Handle signup\n\n    signupButton.addEventListener('click', function (e) {\n      e.preventDefault();\n\n      _showForm('signup');\n    });\n  };\n\n  var _handleSignUpForm = function _handleSignUpForm(e) {\n    var validation;\n\n    var submitButton = _login.querySelector('#kt_login_signup_form_submit_button');\n\n    var cancelButton = _login.querySelector('#kt_login_signup_form_cancel_button'); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n\n    validation = FormValidation.formValidation(_signupForm, {\n      fields: {\n        name: {\n          validators: {\n            notEmpty: {\n              message: 'Username is required'\n            }\n          }\n        },\n        email: {\n          validators: {\n            notEmpty: {\n              message: 'Email address is required'\n            },\n            emailAddress: {\n              message: 'The value is not a valid email address'\n            }\n          }\n        },\n        password: {\n          validators: {\n            notEmpty: {\n              message: 'The password is required'\n            }\n          }\n        },\n        password_confirmation: {\n          validators: {\n            notEmpty: {\n              message: 'The password confirmation is required'\n            },\n            identical: {\n              compare: function compare() {\n                return form.querySelector('[name=\"password\"]').value;\n              },\n              message: 'The password and its confirm are not the same'\n            }\n          }\n        },\n        agree: {\n          validators: {\n            notEmpty: {\n              message: 'You must accept the terms and conditions'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        submitButton: new FormValidation.plugins.SubmitButton(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row'\n        })\n      }\n    });\n    submitButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      validation.validate().then(function (status) {\n        if (status === 'Valid') {\n          var REGISTER_URL = _signupForm.getAttribute('data-register-url');\n\n          var CSRF_TOKEN = _signupForm.getAttribute('data-csrf_token');\n\n          $.ajaxSetup({\n            headers: {\n              'X-CSRF-TOKEN': CSRF_TOKEN\n            }\n          });\n          $.ajax({\n            url: REGISTER_URL,\n            method: 'POST',\n            data: new FormData(document.getElementById('kt_login_signup_form')),\n            cache: false,\n            processData: false,\n            contentType: false,\n            success: function success(result) {\n              if ((result === null || result === void 0 ? void 0 : result.status) === 1) {\n                Swal.fire({\n                  title: 'Success!',\n                  text: result === null || result === void 0 ? void 0 : result.message,\n                  icon: \"success\",\n                  buttonsStyling: false,\n                  confirmButtonText: \"Ok,Got it\",\n                  customClass: {\n                    confirmButton: \"btn btn-primary\"\n                  }\n                });\n                window.location.href = window.location.href;\n              } else {\n                Swal.fire({\n                  title: 'Validation Error',\n                  text: result === null || result === void 0 ? void 0 : result.message,\n                  icon: \"error\",\n                  buttonsStyling: false,\n                  confirmButtonText: \"Ok, got it!\",\n                  customClass: {\n                    confirmButton: \"btn btn-primary\"\n                  }\n                });\n              }\n            },\n            error: function error(jqXHR, textStatus, errorThrown) {\n              Swal.fire({\n                text: textStatus,\n                icon: \"error\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              });\n            }\n          });\n        } else {\n          swal.fire({\n            text: \"Sorry, looks like there are some errors detected, please try again.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn fw-bold btn-light-primary\"\n            }\n          }).then(function () {\n            KTUtil.scrollTop();\n          });\n        }\n      });\n    }); // Handle cancel button\n\n    cancelButton.addEventListener('click', function (e) {\n      e.preventDefault();\n\n      _showForm('signin');\n    });\n  };\n\n  var _handlePasswordResetForm = function _handlePasswordResetForm(e) {\n    var validation;\n\n    var submitButton = _login.querySelector('#kt_login_password_reset_form_submit_button');\n\n    var cancelButton = _login.querySelector('#kt_login_password_reset_form_cancel_button'); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n\n    validation = FormValidation.formValidation(_passwordResetForm, {\n      fields: {\n        email: {\n          validators: {\n            notEmpty: {\n              message: 'Email address is required'\n            },\n            emailAddress: {\n              message: 'The value is not a valid email address'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row'\n        })\n      }\n    }); // Handle submit button\n\n    submitButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      validation.validate().then(function (status) {\n        if (status === 'Valid') {\n          swal.fire({\n            text: \"Sent password reset. Please check your email\",\n            icon: \"success\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn fw-bold btn-light-primary\"\n            }\n          }).then(function () {\n            KTUtil.scrollTop();\n          });\n        } else {\n          swal.fire({\n            text: \"Sorry, looks like there are some errors detected, please try again.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn fw-bold btn-light-primary\"\n            }\n          }).then(function () {\n            KTUtil.scrollTop();\n          });\n        }\n      });\n    }); // Handle cancel button\n\n    cancelButton.addEventListener('click', function (e) {\n      e.preventDefault();\n\n      _showForm('signin');\n    });\n  }; // Public Functions\n\n\n  return {\n    // public functions\n    init: function init() {\n      _login = document.querySelector('#kt_login');\n      _signinForm = document.querySelector('#kt_login_signin_form');\n      _signupForm = document.querySelector('#kt_login_signup_form');\n      _passwordResetForm = document.querySelector('#kt_login_password_reset_form');\n\n      _handleSignInForm();\n\n      _handleSignUpForm();\n\n      _handlePasswordResetForm();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTLogin.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/src/js/custom/general/login.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/src/js/custom/general/login.js"]();
/******/ 	
/******/ })()
;