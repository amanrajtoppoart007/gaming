/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/src/js/custom/widgets.js":
/*!********************************************!*\
  !*** ./resources/src/js/custom/widgets.js ***!
  \********************************************/
/***/ (() => {

eval(" // Class definition\n\nvar KTWidgets = function () {\n  // Stats widgets\n  var initStatsWidget1 = function initStatsWidget1() {\n    var element = document.querySelector(\"#kt_stats_widget_1_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var randomScalingFactor = function randomScalingFactor() {\n      return Math.round(Math.random() * 100);\n    };\n\n    var tooltipBgColor = KTUtil.getCssVariableValue('--bs-gray-200');\n    var tooltipColor = KTUtil.getCssVariableValue('--bs-gray-800');\n    var color1 = KTUtil.getCssVariableValue('--bs-success');\n    var color2 = KTUtil.getCssVariableValue('--bs-warning');\n    var color3 = KTUtil.getCssVariableValue('--bs-primary');\n    var config = {\n      type: 'doughnut',\n      data: {\n        datasets: [{\n          data: [30, 40, 25],\n          backgroundColor: [color1, color2, color3]\n        }],\n        labels: ['Angular', 'CSS', 'HTML']\n      },\n      options: {\n        chart: {\n          fontFamily: 'inherit'\n        },\n        cutout: '75%',\n        cutoutPercentage: 75,\n        responsive: true,\n        maintainAspectRatio: false,\n        title: {\n          display: false,\n          text: 'Technology'\n        },\n        animation: {\n          animateScale: true,\n          animateRotate: true\n        },\n        tooltips: {\n          enabled: true,\n          intersect: false,\n          mode: 'nearest',\n          bodySpacing: 5,\n          yPadding: 10,\n          xPadding: 10,\n          caretPadding: 0,\n          displayColors: false,\n          backgroundColor: tooltipBgColor,\n          bodyFontColor: tooltipColor,\n          cornerRadius: 4,\n          footerSpacing: 0,\n          titleSpacing: 0\n        },\n        plugins: {\n          legend: {\n            display: false\n          }\n        }\n      }\n    };\n    var ctx = element.getContext('2d');\n    var myDoughnut = new Chart(ctx, config);\n  };\n\n  var initStatsWidget2 = function initStatsWidget2(tabSelector, chartSelector, data1, data2, initByDefault) {\n    var element = document.querySelector(chartSelector);\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: data1\n      }, {\n        name: 'Revenue',\n        data: data2\n      }],\n      chart: {\n        fontFamily: 'inherit',\n        type: 'bar',\n        height: height,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['40%'],\n          borderRadius: 4\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 2,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTUtil.getCssVariableValue('--bs-gray-700'),\n            fontSize: '12px'\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: KTUtil.getCssVariableValue('--bs-gray-700'),\n            fontSize: '12px'\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px'\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTUtil.getCssVariableValue('--bs-primary'), KTUtil.getCssVariableValue('--bs-light-primary')],\n      grid: {\n        borderColor: KTUtil.getCssVariableValue('--bs-gray-200'),\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    var init = false;\n    var tab = document.querySelector(tabSelector);\n\n    if (initByDefault === true) {\n      chart.render();\n      init = true;\n    }\n\n    tab.addEventListener('shown.bs.tab', function (event) {\n      if (init == false) {\n        chart.render();\n        init = true;\n      }\n    });\n  }; // Form Widgets\n\n\n  var initFormWidget1 = function initFormWidget1() {\n    var formEl = document.querySelector(\"#kt_forms_widget_1_form\");\n    var editorId = 'kt_forms_widget_1_editor';\n\n    if (!formEl) {\n      return;\n    } // init editor\n\n\n    var options = {\n      modules: {\n        toolbar: {\n          container: \"#kt_forms_widget_1_editor_toolbar\"\n        }\n      },\n      placeholder: 'What is on your mind ?',\n      theme: 'snow'\n    };\n\n    if (!formEl) {\n      return;\n    } // Init editor\n\n\n    var editorObj = new Quill('#' + editorId, options);\n  }; // Mixed widgets\n\n\n  var initMixedWidget1 = function initMixedWidget1() {\n    var element = document.querySelector(\"#kt_mixed_widget_1_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 30, 43, 43, 34, 34, 26, 26, 47, 47]\n      }],\n      chart: {\n        fontFamily: 'inherit',\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: ['#20D489', '']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: '#A1A5B7',\n            fontSize: '12px'\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTUtil.getCssVariableValue('--bs-primary'),\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px'\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 60,\n        labels: {\n          show: false,\n          style: {\n            colors: '#A1A5B7',\n            fontSize: '12px'\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px'\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      fill: {\n        type: 'gradient',\n        gradient: {\n          shadeIntensity: 1,\n          opacityFrom: 0.7,\n          opacityTo: 0.6,\n          stops: [0, 100]\n        }\n      },\n      colors: [KTUtil.getCssVariableValue('--bs-primary')],\n      markers: {\n        colors: [KTUtil.getCssVariableValue('--bs-light-primary')],\n        strokeColor: [KTUtil.getCssVariableValue('--bs-primary')],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var initMixedWidget2 = function initMixedWidget2() {\n    var element = document.querySelector(\"#kt_mixed_widget_2_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 30, 43, 43, 34, 34, 26, 26, 47, 47]\n      }],\n      chart: {\n        fontFamily: 'inherit',\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTUtil.getCssVariableValue('--bs-info')]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: '#A1A5B7',\n            fontSize: '12px'\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: '#E4E6EF',\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px'\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          show: false,\n          style: {\n            colors: '#A1A5B7',\n            fontSize: '12px'\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px'\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      fill: {\n        type: 'gradient',\n        gradient: {\n          shadeIntensity: 1,\n          opacityFrom: 0.7,\n          opacityTo: 0.6,\n          stops: [0, 100]\n        }\n      },\n      colors: [KTUtil.getCssVariableValue('--bs-info')],\n      markers: {\n        colors: [KTUtil.getCssVariableValue('--bs-light-info')],\n        strokeColor: [KTUtil.getCssVariableValue('--bs-info')],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  }; // Public methods\n\n\n  return {\n    init: function init() {\n      // Init Stats widgets\n      initStatsWidget1(); // Init Stats Widgets\n\n      initStatsWidget2('#kt_stats_widget_2_tab_1', '#kt_stats_widget_2_chart_1', [44, 55, 57, 56, 61, 58], [76, 85, 101, 98, 87, 105], true);\n      initStatsWidget2('#kt_stats_widget_2_tab_2', '#kt_stats_widget_2_chart_2', [35, 60, 35, 50, 45, 30], [65, 80, 50, 80, 75, 105], false);\n      initStatsWidget2('#kt_stats_widget_2_tab_3', '#kt_stats_widget_2_chart_3', [25, 40, 45, 50, 40, 60], [76, 85, 101, 98, 87, 105], false);\n      initStatsWidget2('#kt_stats_widget_2_tab_4', '#kt_stats_widget_2_chart_4', [50, 35, 45, 55, 30, 40], [76, 85, 101, 98, 87, 105], false); // Init Mixed Widgets\n\n      initMixedWidget1();\n      initMixedWidget2(); // Init Form Widgets\n\n      initFormWidget1();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTWidgets.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/src/js/custom/widgets.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/src/js/custom/widgets.js"]();
/******/ 	
/******/ })()
;